{"version":3,"sources":["components/Posts/Posts.module.css","components/Todo/Todo.module.css","components/Post/Post.module.css","axios.js","store/types.js","store/actions/post-actions.js","store/actions/todo-actions.js","store/actions/index.js","components/Todo/Todo.js","components/Todos/Todos.js","components/Post/Post.js","components/Posts/Posts.js","container/Main/Main.js","App.js","store/reducers/post-reducer.js","store/reducers/todo-reducer.js","store/reducers/index.js","store/index.js","index.js","container/Main/Main.module.css","components/Todos/Todos.module.css"],"names":["module","exports","axios","create","baseURL","LOADING_TODO","TODO_ERROR","SET_TODOS","ADD_TODO","DELETE_TODO","LOADING_POSTS","POST_ERROR","SET_POSTS","ADD_POST","DELETE_POST","setError","err","type","types","error","loadPosts","dispatch","get","then","res","posts","data","splice","catch","console","log","addPost","title","body","newTodo","post","delPost","postId","delete","id","loadTodos","todos","slice","addTodo","todo","completed","addTodoSuccess","delTodo","todoId","actions","postActions","todoActions","Todo","props","className","classes","onClick","Todos","useState","setNewTodo","useEffect","todosView","loading","length","map","deleteTodo","NewTodo","placeholder","value","onChange","e","target","Error","Post","Posts","setTitle","setBody","postsView","deletePost","NewPost","connect","state","loadingTodos","loadingPosts","todoError","postError","tab","setTab","Main","Heading","Buttons","Button","App","initState","postReducer","action","oldPostsBeforeAdding","JSON","parse","stringify","newPosts","forEach","oldPost","push","oldPostsBeforeDeleting","remainingPosts","filter","todoReducer","oldTodosBeforeAdding","newTodos","oldTodo","oldTodosBeforeDeleting","remainingTodos","rootReducer","combineReducers","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"4GACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,QAAU,uBAAuB,MAAQ,uB,mBCArHD,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,qB,uZCAVC,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,yCCFEC,EAAe,kBACfC,EAAa,mBACbC,EAAY,aACZC,EAAW,WACXC,EAAc,cAEdC,EAAgB,gBAChBC,EAAa,mBACbC,EAAY,YACZC,EAAW,WACXC,EAAc,cCLrBC,EAAW,SAACC,GAAD,MAAU,CACzBC,KAAMC,EACNC,MAAOH,IAcII,EAAY,kBAAM,SAACC,GAC9BA,EAV4B,CAC5BJ,KAAMC,IAUNhB,EACGoB,IAAI,UACJC,MAAK,SAACC,GATM,IAACC,EAUZJ,GAVYI,EAUMD,EAAIE,KAAKC,OAAO,EAAG,IAVd,CAC3BV,KAAMC,EACNO,cAUGG,OAAM,SAACZ,GACNa,QAAQC,IAAI,wBAAyBd,GACrCK,EAASN,EAAS,iCAWXgB,EAAU,SAACC,EAAOC,GAAR,OAAiB,SAACZ,GACvC,IAAMa,EAAU,CAAEF,MAAOA,EAAOC,KAAMA,GACtC/B,EACGiC,KAAK,SAAUD,GACfX,MAAK,SAACC,GATY,IAACW,EAWlBd,GAXkBc,EAWMX,EAAIE,KAXA,CAChCT,KAAMC,EACNiB,aAWGP,OAAM,SAACZ,GACNa,QAAQC,IAAI,sBAAuBd,GACnCK,EAASN,EAAS,gCAWXqB,EAAU,SAACC,GAAD,OAAY,SAAChB,GAClCnB,EACGoC,OADH,iBACoBD,IACjBd,MAAK,SAACC,GACLH,EAT0B,CAC9BJ,KAAMC,EACNqB,GAO4BF,OAEzBT,OAAM,SAACZ,GACNa,QAAQC,IAAI,wBAAyBd,GACrCK,EAASN,EAAS,mCCjElBA,EAAW,SAACI,GAAD,MAAY,CAC3BF,KAAMC,EACNC,UAcWqB,EAAY,kBAAM,SAACnB,GAC9BA,EAV8B,CAC9BJ,KAAMC,IAUNhB,EACGoB,IAAI,UACJC,MAAK,SAACC,GATM,IAACiB,EAUZpB,GAVYoB,EAUMjB,EAAIE,KAAKgB,MAAM,EAAG,IAVb,CAC3BzB,KAAMC,EACNuB,cAUGb,OAAM,SAACZ,GACNK,EAASN,EAAS,8BAWX4B,EAAU,SAACC,GAAD,OAAU,SAACvB,GAChC,IAAMa,EAAU,CAAEF,MAAOY,EAAMC,WAAW,GAE1C3C,EACGiC,KAAK,SAAUD,GACfX,MAAK,SAACC,GAELH,EAZiB,SAACuB,GAAD,MAAW,CAChC3B,KAAMC,EACN0B,QAUaE,CAAetB,EAAIE,UAE7BE,OAAM,SAACZ,GACNa,QAAQC,IAAI,sBAAuBd,GACnCK,EAASN,EAAS,gCAWXgC,EAAU,SAACC,GAAD,OAAY,SAAC3B,GAClCnB,EACGoC,OADH,iBACoBU,IACjBzB,MAAK,SAACC,GACLH,EAT0B,CAC9BJ,KAAMC,EACNqB,GAO4BS,OAEzBpB,OAAM,SAACZ,GACNa,QAAQC,IAAI,sBAAuBd,GACnCK,EAASN,EAAS,kCCjETkC,EAFF,2BAAQC,GAAgBC,G,iDCUtBC,EAVF,SAACC,GACZ,OACE,sBAAKC,UAAWC,IAAQH,KAAxB,UACE,uBAAOnC,KAAK,aACZ,4BAAIoC,EAAMT,OACV,wBAAQY,QAAS,kBAAMH,EAAMf,UAA7B,wBCiDSmB,EAnDD,SAACJ,GAAW,IAAD,EACOK,mBAAS,IADhB,mBAChBxB,EADgB,KACPyB,EADO,KAGfnB,EAAca,EAAdb,UACRoB,qBAAU,WACRpB,MACC,CAACA,IAEJ,IAAIqB,EAAY,KAiBhB,OAfEA,EADER,EAAMS,QACI,2CAGVT,EAAMZ,MAAMsB,OAAS,EACnBV,EAAMZ,MAAMuB,KAAI,SAACpB,GAAD,OACd,cAAC,EAAD,CACEN,OAAQ,kBAAMe,EAAMY,WAAWrB,EAAKL,KAEpCK,KAAMA,EAAKZ,OADNY,EAAKL,OAKd,iDAIJ,sBAAKe,UAAWC,IAAQE,MAAxB,UACE,uCACA,uBACA,sBAAKH,UAAWC,IAAQW,QAAxB,UACE,uBACEjD,KAAK,OACLkD,YAAY,iBACZC,MAAOlC,EACPmC,SAAU,SAACC,GAAD,OAAOX,EAAWW,EAAEC,OAAOH,UAEvC,wBACEZ,QAAS,WACPH,EAAMV,QAAQT,GACdyB,EAAW,KAHf,yBASDN,EAAMlC,OAAS,mBAAGmC,UAAWC,IAAQiB,MAAtB,SAA8BnB,EAAMlC,QACnD0C,M,kCCvCQY,EAVF,SAACpB,GACZ,OACE,sBAAKC,UAAWC,IAAQkB,KAAxB,UACE,6BAAKpB,EAAMrB,QACX,4BAAIqB,EAAMpB,OACV,wBAAQuB,QAASH,EAAMf,OAAvB,6BC0DSoC,EA5DD,SAACrB,GAAW,IAAD,EACGK,mBAAS,IADZ,mBAChB1B,EADgB,KACT2C,EADS,OAECjB,mBAAS,IAFV,mBAEhBzB,EAFgB,KAEV2C,EAFU,KAIfxD,EAAciC,EAAdjC,UACRwC,qBAAU,WACRxC,MACC,CAACA,IAEJ,IAAIyD,EAAY,KAmBhB,OAjBEA,EADExB,EAAMS,QACI,6CAGVT,EAAM5B,MAAMsC,OAAS,EACnBV,EAAM5B,MAAMuC,KAAI,SAAC7B,GAAD,OACd,cAAC,EAAD,CACEG,OAAQ,kBAAMe,EAAMyB,WAAW3C,EAAKI,KAEpCP,MAAOG,EAAKH,MACZC,KAAME,EAAKF,MAFNE,EAAKI,OAMd,iDAKJ,sBAAKe,UAAWC,IAAQmB,MAAxB,UACE,uCACA,uBACA,sBAAKpB,UAAWC,IAAQwB,QAAxB,UACE,uBACE9D,KAAK,OACLkD,YAAY,uBACZC,MAAOpC,EACPqC,SAAU,SAACC,GAAD,OAAOK,EAASL,EAAEC,OAAOH,UAErC,0BACED,YAAY,kBACZC,MAAOnC,EACPoC,SAAU,SAACC,GAAD,OAAOM,EAAQN,EAAEC,OAAOH,UAEpC,wBACEZ,QAAS,WACPH,EAAMtB,QAAQC,EAAOC,GACrB0C,EAAS,IACTC,EAAQ,KAJZ,yBAUDvB,EAAMlC,OAAS,mBAAGmC,UAAWC,IAAQiB,MAAtB,SAA8BnB,EAAMlC,QACnD0D,MCGQG,eAlBS,SAACC,GAAD,MAAY,CAClCxD,MAAOwD,EAAMxD,MAAMA,MACnBgB,MAAOwC,EAAMxC,MAAMA,MACnByC,aAAcD,EAAMxC,MAAMqB,QAC1BqB,aAAcF,EAAMxD,MAAMqC,QAC1BsB,UAAWH,EAAMxC,MAAMtB,MACvBkE,UAAWJ,EAAMxD,MAAMN,UAGE,SAACE,GAAD,MAAe,CACxCD,UAAW,kBAAMC,EAAS4B,EAAQ7B,cAClCW,QAAS,SAACC,EAAOC,GAAR,OAAiBZ,EAAS4B,EAAQlB,QAAQC,EAAOC,KAC1D6C,WAAY,SAACzC,GAAD,OAAYhB,EAAS4B,EAAQb,QAAQC,KACjDG,UAAW,kBAAMnB,EAAS4B,EAAQT,cAClCG,QAAS,SAACC,GAAD,OAAUvB,EAAS4B,EAAQN,QAAQC,KAC5CqB,WAAY,SAACjB,GAAD,OAAY3B,EAAS4B,EAAQF,QAAQC,QAGpCgC,EAtDF,SAAC3B,GAAW,IAAD,EACAK,mBAAS,SADT,mBACf4B,EADe,KACVC,EADU,KAEtB,OACE,sBAAKjC,UAAWC,IAAQiC,KAAxB,UACE,oBAAIlC,UAAWC,IAAQkC,QAAvB,0BACA,sBAAKnC,UAAWC,IAAQmC,QAAxB,UACE,wBAAQlC,QAAS,kBAAM+B,EAAO,UAAUjC,UAAWC,IAAQoC,OAA3D,wBAGA,wBAAQnC,QAAS,kBAAM+B,EAAO,UAAUjC,UAAWC,IAAQoC,OAA3D,2BAIO,UAARL,EACC,cAAC,EAAD,CACE7D,MAAO4B,EAAM5B,MACbqC,QAAST,EAAM8B,aACfhE,MAAOkC,EAAMgC,UACbjE,UAAWiC,EAAMjC,UACjBW,QAASsB,EAAMtB,QACf+C,WAAYzB,EAAMyB,aAGpB,cAAC,EAAD,CACErC,MAAOY,EAAMZ,MACbqB,QAAST,EAAM6B,aACf/D,MAAOkC,EAAM+B,UACbzC,QAASU,EAAMV,QACfH,UAAWa,EAAMb,UACjByB,WAAYZ,EAAMY,mBC/Bb2B,MAJf,WACE,OAAO,cAAC,EAAD,K,eCHHC,EAAY,CAChBpE,MAAO,GACPqC,SAAS,EACT3C,MAAO,MAmDM2E,EAhDK,WAAgC,IAA/Bb,EAA8B,uDAAtBY,EAAWE,EAAW,uCACjD,OAAQA,EAAO9E,MAEb,KAAKC,EACH,OAAO,2BACF+D,GADL,IAEEnB,SAAS,EACT3C,MAAO,OAGX,KAAKD,EACH,OAAO,2BACF+D,GADL,IAEExD,MAAOsE,EAAOtE,MACdqC,SAAS,IAGb,KAAK5C,EACH,OAAO,2BACF+D,GADL,IAEE9D,MAAO4E,EAAO5E,MACd2C,SAAS,IAGb,KAAK5C,EACH,IAAI8E,EAAuBC,KAAKC,MAAMD,KAAKE,UAAUlB,EAAMxD,QACrD2E,EAAW,CAACL,EAAO5D,MAEzB,OADA6D,EAAqBK,SAAQ,SAACC,GAAD,OAAaF,EAASG,KAAKD,MACjD,2BACFrB,GADL,IAEExD,MAAO2E,IAGX,KAAKlF,EACH,IAAIsF,EAAyBP,KAAKC,MAAMD,KAAKE,UAAUlB,EAAMxD,QACvDgF,EAAiBD,EAAuBE,QAC5C,SAACvE,GAAD,OAAUA,EAAKI,KAAOwD,EAAOxD,MAE/B,OAAO,2BACF0C,GADL,IAEExD,MAAOgF,IAGX,QACE,OAAOxB,IClDPY,EAAY,CAChBpD,MAAO,GACPqB,SAAS,EACT3C,MAAO,MAmDMwF,GAhDK,WAAgC,IAA/B1B,EAA8B,uDAAtBY,EAAWE,EAAW,uCACjD,OAAQA,EAAO9E,MAEb,KAAKC,EACH,OAAO,2BACF+D,GADL,IAEEnB,SAAS,EACT3C,MAAO,OAGX,KAAKD,EACH,OAAO,2BACF+D,GADL,IAEExC,MAAOsD,EAAOtD,MACdqB,SAAS,IAGb,KAAK5C,EACH,OAAO,2BACF+D,GADL,IAEE9D,MAAO4E,EAAO5E,MACd2C,SAAS,IAGb,KAAK5C,EACH,IAAI0F,EAAuBX,KAAKC,MAAMD,KAAKE,UAAUlB,EAAMxC,QACrDoE,EAAW,CAACd,EAAOnD,MAEzB,OADAgE,EAAqBP,SAAQ,SAACS,GAAD,OAAaD,EAASN,KAAKO,MACjD,2BACF7B,GADL,IAEExC,MAAOoE,IAGX,KAAK3F,EACH,IAAI6F,EAAyBd,KAAKC,MAAMD,KAAKE,UAAUlB,EAAMxC,QACvDuE,EAAiBD,EAAuBL,QAC5C,SAAC9D,GAAD,OAAUA,EAAKL,KAAOwD,EAAOxD,MAE/B,OAAO,2BACF0C,GADL,IAEExC,MAAOuE,IAGX,QACE,OAAO/B,IC9BEgC,GARKC,YAAgB,CAIlCzF,MAAOqE,EACPrD,MAAOkE,KCdHQ,GAGAC,IAMSC,GALDC,YACZL,GACAE,GAAiBI,YAAgBC,OCFnCC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,GAAjB,SACE,cAAC,EAAD,MAEFM,SAASC,eAAe,U,kBCZ1B5H,EAAOC,QAAU,CAAC,KAAO,mBAAmB,QAAU,sBAAsB,QAAU,sBAAsB,OAAS,uB,kBCArHD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,QAAU,0B","file":"static/js/main.ea6c0843.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Posts\":\"Posts_Posts__1Sooq\",\"Error\":\"Posts_Error__3KRtj\",\"NewPost\":\"Posts_NewPost__1HYbh\",\"Todos\":\"Posts_Todos__2I4G3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Todo\":\"Todo_Todo__v_MMP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Post\":\"Post_Post__1Qfpl\"};","import axios from \"axios\";\r\nexport default axios.create({\r\n  baseURL: \"https://jsonplaceholder.typicode.com\",\r\n});\r\n","export const LOADING_TODO = \"LOAD_TODO_START\";\r\nexport const TODO_ERROR = \"LOAD_TODOS_ERROR\";\r\nexport const SET_TODOS = \"LOAD_TODOS\";\r\nexport const ADD_TODO = \"ADD_TODO\";\r\nexport const DELETE_TODO = \"DELETE_TODO\";\r\n\r\nexport const LOADING_POSTS = \"POSTS_LOADING\";\r\nexport const POST_ERROR = \"LOAD_POSTS_ERROR\";\r\nexport const SET_POSTS = \"SET_POSTS\";\r\nexport const ADD_POST = \"ADD_POST\";\r\nexport const DELETE_POST = \"DELETE_POST\";\r\n","import axios from \"../../axios\";\r\nimport * as types from \"../types\";\r\n\r\n// ERROR ACTION\r\n\r\nconst setError = (err) => ({\r\n  type: types.POST_ERROR,\r\n  error: err,\r\n});\r\n\r\n// --------------------- LOAD POSTS -------------------------\r\n\r\nconst loadPostsStart = () => ({\r\n  type: types.LOADING_POSTS,\r\n});\r\n\r\nconst setPosts = (posts) => ({\r\n  type: types.SET_POSTS,\r\n  posts,\r\n});\r\n\r\nexport const loadPosts = () => (dispatch) => {\r\n  dispatch(loadPostsStart());\r\n  axios\r\n    .get(\"/posts\")\r\n    .then((res) => {\r\n      dispatch(setPosts(res.data.splice(0, 10)));\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Error Loading Posts: \", err);\r\n      dispatch(setError(\"Failed to Load Posts...\"));\r\n    });\r\n};\r\n\r\n// ---------------------------------- ADD POST SECTION --------------------------------------------\r\n\r\nconst addPostSuccess = (post) => ({\r\n  type: types.ADD_POST,\r\n  post,\r\n});\r\n\r\nexport const addPost = (title, body) => (dispatch) => {\r\n  const newTodo = { title: title, body: body };\r\n  axios\r\n    .post(\"/posts\", newTodo)\r\n    .then((res) => {\r\n      // console.log(res.data);\r\n      dispatch(addPostSuccess(res.data));\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Error Adding Post: \", err);\r\n      dispatch(setError(\"Failed to Add Post....\"));\r\n    });\r\n};\r\n\r\n// ------------------------ DELETE POST SECTION ---------------------------------------\r\n\r\nconst delPostSuccess = (id) => ({\r\n  type: types.DELETE_POST,\r\n  id,\r\n});\r\n\r\nexport const delPost = (postId) => (dispatch) => {\r\n  axios\r\n    .delete(`/posts/${postId}`)\r\n    .then((res) => {\r\n      dispatch(delPostSuccess(postId));\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Error deleting Post: \", err);\r\n      dispatch(setError(\"Failed to Delete Post....\"));\r\n    });\r\n};\r\n","import * as types from \"../types\";\r\nimport axios from \"../../axios\";\r\n\r\n// GENERAL ERROR SETTING\r\n\r\nconst setError = (error) => ({\r\n  type: types.TODO_ERROR,\r\n  error,\r\n});\r\n\r\n// ------------------------- LOADING TODO SECTION ------------------------------\r\n\r\nconst loadingTodoStart = () => ({\r\n  type: types.LOADING_TODO,\r\n});\r\n\r\nconst setTodos = (todos) => ({\r\n  type: types.SET_TODOS,\r\n  todos,\r\n});\r\n\r\nexport const loadTodos = () => (dispatch) => {\r\n  dispatch(loadingTodoStart());\r\n  axios\r\n    .get(\"/todos\")\r\n    .then((res) => {\r\n      dispatch(setTodos(res.data.slice(0, 10)));\r\n    })\r\n    .catch((err) => {\r\n      dispatch(setError(\"Failed To Load todos\"));\r\n    });\r\n};\r\n\r\n// ---------------------------------- ADD TODO SECTION --------------------------------------------\r\n\r\nconst addTodoSuccess = (todo) => ({\r\n  type: types.ADD_TODO,\r\n  todo,\r\n});\r\n\r\nexport const addTodo = (todo) => (dispatch) => {\r\n  const newTodo = { title: todo, completed: false };\r\n\r\n  axios\r\n    .post(\"/todos\", newTodo)\r\n    .then((res) => {\r\n      // console.log(\"Added Todo: \", newTodo);\r\n      dispatch(addTodoSuccess(res.data));\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Error Adding Todo: \", err);\r\n      dispatch(setError(\"Failed to Add Todo....\"));\r\n    });\r\n};\r\n\r\n// ------------------- DELETE TODO SECTION -------------------------------------\r\n\r\nconst delTodoSuccess = (id) => ({\r\n  type: types.DELETE_TODO,\r\n  id,\r\n});\r\n\r\nexport const delTodo = (todoId) => (dispatch) => {\r\n  axios\r\n    .delete(`/todos/${todoId}`)\r\n    .then((res) => {\r\n      dispatch(delTodoSuccess(todoId));\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Error Deleting Todo\", err);\r\n      dispatch(setError(\"Failed to Delete Todo...\"));\r\n    });\r\n};\r\n","import * as postActions from \"./post-actions\";\r\nimport * as todoActions from \"./todo-actions\";\r\n\r\nconst actions = { ...postActions, ...todoActions };\r\n\r\nexport default actions;\r\n","import React from \"react\";\r\nimport classes from \"./Todo.module.css\";\r\n\r\nconst Todo = (props) => {\r\n  return (\r\n    <div className={classes.Todo}>\r\n      <input type=\"checkbox\" />\r\n      <p>{props.todo}</p>\r\n      <button onClick={() => props.delete()} >Delete</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport classes from \"./Todos.module.css\";\r\n\r\nimport Todo from \"../Todo/Todo\";\r\n\r\nconst Todos = (props) => {\r\n  const [newTodo, setNewTodo] = useState(\"\");\r\n\r\n  const { loadTodos } = props;\r\n  useEffect(() => {\r\n    loadTodos();\r\n  }, [loadTodos]);\r\n\r\n  let todosView = null;\r\n  if (props.loading) {\r\n    todosView = <p>Loading...</p>;\r\n  } else {\r\n    todosView =\r\n      props.todos.length > 0 ? (\r\n        props.todos.map((todo) => (\r\n          <Todo\r\n            delete={() => props.deleteTodo(todo.id)}\r\n            key={todo.id}\r\n            todo={todo.title}\r\n          />\r\n        ))\r\n      ) : (\r\n        <p>No Todos Found..</p>\r\n      );\r\n  }\r\n  return (\r\n    <div className={classes.Todos}>\r\n      <h1>Todos</h1>\r\n      <hr />\r\n      <div className={classes.NewTodo}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter New Todo\"\r\n          value={newTodo}\r\n          onChange={(e) => setNewTodo(e.target.value)}\r\n        />\r\n        <button\r\n          onClick={() => {\r\n            props.addTodo(newTodo);\r\n            setNewTodo(\"\");\r\n          }}\r\n        >\r\n          Add Todo\r\n        </button>\r\n      </div>\r\n      {props.error && <p className={classes.Error}>{props.error}</p>}\r\n      {todosView}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todos;\r\n","import React from \"react\";\r\nimport classes from \"./Post.module.css\";\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={classes.Post}>\r\n      <h3>{props.title}</h3>\r\n      <p>{props.body}</p>\r\n      <button onClick={props.delete} >Delete Post</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport classes from \"./Posts.module.css\";\r\n\r\nimport Post from \"../Post/Post\";\r\n\r\nconst Posts = (props) => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [body, setBody] = useState(\"\");\r\n\r\n  const { loadPosts } = props;\r\n  useEffect(() => {\r\n    loadPosts();\r\n  }, [loadPosts]);\r\n\r\n  let postsView = null;\r\n  if (props.loading) {\r\n    postsView = <p>Loading.....</p>;\r\n  } else {\r\n    postsView =\r\n      props.posts.length > 0 ? (\r\n        props.posts.map((post) => (\r\n          <Post\r\n            delete={() => props.deletePost(post.id)}\r\n            key={post.id}\r\n            title={post.title}\r\n            body={post.body}\r\n          />\r\n        ))\r\n      ) : (\r\n        <p>No Posts Found..</p>\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Posts}>\r\n      <h1>Posts</h1>\r\n      <hr />\r\n      <div className={classes.NewPost}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter New Post Title\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n        />\r\n        <textarea\r\n          placeholder=\"Enter Post Body\"\r\n          value={body}\r\n          onChange={(e) => setBody(e.target.value)}\r\n        />\r\n        <button\r\n          onClick={() => {\r\n            props.addPost(title, body);\r\n            setTitle(\"\");\r\n            setBody(\"\");\r\n          }}\r\n        >\r\n          Add Post\r\n        </button>\r\n      </div>\r\n      {props.error && <p className={classes.Error}>{props.error}</p>}\r\n      {postsView}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport actions from \"../../store/actions\";\r\n\r\nimport classes from \"./Main.module.css\";\r\n\r\nimport Todos from \"../../components/Todos/Todos\";\r\nimport Posts from \"../../components/Posts/Posts\";\r\n\r\nconst Main = (props) => {\r\n  const [tab, setTab] = useState(\"POSTS\");\r\n  return (\r\n    <div className={classes.Main}>\r\n      <h1 className={classes.Heading}>My Redux App</h1>\r\n      <div className={classes.Buttons}>\r\n        <button onClick={() => setTab(\"POSTS\")} className={classes.Button}>\r\n          Show Posts\r\n        </button>\r\n        <button onClick={() => setTab(\"TODOS\")} className={classes.Button}>\r\n          Show Todos\r\n        </button>\r\n      </div>\r\n      {tab === \"POSTS\" ? (\r\n        <Posts\r\n          posts={props.posts}\r\n          loading={props.loadingPosts}\r\n          error={props.postError}\r\n          loadPosts={props.loadPosts}\r\n          addPost={props.addPost}\r\n          deletePost={props.deletePost}\r\n        />\r\n      ) : (\r\n        <Todos\r\n          todos={props.todos}\r\n          loading={props.loadingTodos}\r\n          error={props.todoError}\r\n          addTodo={props.addTodo}\r\n          loadTodos={props.loadTodos}\r\n          deleteTodo={props.deleteTodo}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  posts: state.posts.posts,\r\n  todos: state.todos.todos,\r\n  loadingTodos: state.todos.loading,\r\n  loadingPosts: state.posts.loading,\r\n  todoError: state.todos.error,\r\n  postError: state.posts.error,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  loadPosts: () => dispatch(actions.loadPosts()),\r\n  addPost: (title, body) => dispatch(actions.addPost(title, body)),\r\n  deletePost: (postId) => dispatch(actions.delPost(postId)),\r\n  loadTodos: () => dispatch(actions.loadTodos()),\r\n  addTodo: (todo) => dispatch(actions.addTodo(todo)),\r\n  deleteTodo: (todoId) => dispatch(actions.delTodo(todoId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\r\n","import React from \"react\";\n\nimport Main from \"./container/Main/Main\";\n\nfunction App() {\n  return <Main />;\n}\n\nexport default App;\n","import * as types from \"../types\";\r\n\r\nconst initState = {\r\n  posts: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst postReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    // DECIDING WHICH OPERATION TO PERFORM BASED ON THE TYPE OF ACTION\r\n    case types.LOADING_POSTS:\r\n      return {\r\n        ...state,\r\n        loading: true, // SET LOADING STATE TO TRUE\r\n        error: null, // SET ERROR TO FALSE [ IN CASE OF LOAD AFTER ERROR ]\r\n      };\r\n\r\n    case types.SET_POSTS:\r\n      return {\r\n        ...state,\r\n        posts: action.posts, // SET THE POSTS\r\n        loading: false, // SET THE LOADING AS FALSE AS LOAD OPERATION HAS SUCCEEDED\r\n      };\r\n\r\n    case types.POST_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.error, // SET THE TYPE AND DESCRIPTION OF THE ERROR TO BE DISPLAYED\r\n        loading: false, // SET THE LOADING AS FALSE AS LOAD OPERATION HAS FAILED\r\n      };\r\n\r\n    case types.ADD_POST:\r\n      let oldPostsBeforeAdding = JSON.parse(JSON.stringify(state.posts)); // CREATE A NEW REFERENCE BY DEEP CLONE OF THE STATE WE WANT TO CHANGE\r\n      const newPosts = [action.post]; // ADDING THE NEW POST TO THE TOP I.E. AS THE MOST RECENT POST\r\n      oldPostsBeforeAdding.forEach((oldPost) => newPosts.push(oldPost)); // ADDING OLD POSTS;\r\n      return {\r\n        ...state,\r\n        posts: newPosts, // SETTING POSTS AFTER ADDING NEW POST\r\n      };\r\n\r\n    case types.DELETE_POST:\r\n      let oldPostsBeforeDeleting = JSON.parse(JSON.stringify(state.posts)); // CREATE A NEW REFERENCE BY DEEP CLONE OF THE STATE WE WANT TO CHANGE\r\n      const remainingPosts = oldPostsBeforeDeleting.filter(\r\n        (post) => post.id !== action.id\r\n      ); // FILTERING OUT THE DELETED POST OF THE OLD POSTS\r\n      return {\r\n        ...state,\r\n        posts: remainingPosts, //  SETTING POSTS AS THE REMAINING POSTS\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default postReducer;\r\n","import * as types from \"../types\";\r\n\r\nconst initState = {\r\n  todos: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst todoReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    // DECIDING WHICH OPERATION TO PERFORM BASED ON THE TYPE OF ACTION\r\n    case types.LOADING_TODO:\r\n      return {\r\n        ...state,\r\n        loading: true, // SET LOADING STATE TO TRUE\r\n        error: null, // SET ERROR TO FALSE [ IN CASE OF LOAD AFTER ERROR ]\r\n      };\r\n\r\n    case types.SET_TODOS:\r\n      return {\r\n        ...state,\r\n        todos: action.todos, // SET THE TODOS\r\n        loading: false, // SET THE LOADING AS FALSE AS LOAD OPERATION HAS SUCCEEDED\r\n      };\r\n\r\n    case types.TODO_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.error, // SET THE ERROR TO BE DISPLAYED\r\n        loading: false, // SET THE LOADING AS FALSE AS LOAD OPERATION HAS FAILED\r\n      };\r\n\r\n    case types.ADD_TODO:\r\n      let oldTodosBeforeAdding = JSON.parse(JSON.stringify(state.todos)); // CREATE A NEW REFERENCE BY DEEP CLONE OF THE STATE WE WANT TO CHANGE\r\n      const newTodos = [action.todo]; // ADDING THE NEW TODO TO THE TOP I.E. AS THE FIRST TODO\r\n      oldTodosBeforeAdding.forEach((oldTodo) => newTodos.push(oldTodo)); // ADDING OLD TODOS;\r\n      return {\r\n        ...state,\r\n        todos: newTodos, // SETTING TODOS AFTER ADDING NEW TODO\r\n      };\r\n\r\n    case types.DELETE_TODO:\r\n      let oldTodosBeforeDeleting = JSON.parse(JSON.stringify(state.todos)); // CREATE A NEW REFERENCE BY DEEP CLONE OF THE STATE WE WANT TO CHANGE\r\n      const remainingTodos = oldTodosBeforeDeleting.filter(\r\n        (todo) => todo.id !== action.id\r\n      ); // FILTERING OUT THE DELETED TODO OF THE OLD TODOS\r\n      return {\r\n        ...state,\r\n        todos: remainingTodos, //  SETTING TODOS AS THE REMAINING TODOS\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todoReducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\n/*\r\n  A Store can accept only one Reducer.\r\n  However, we have two separate, independent reducers. One for Posts, the other for Todos.\r\n  Generally speaking, one project might have numerous \"pieces\" of state. \r\n  In this application we have two pieces of state -> Posts and Todos.\r\n  In order for things to work, we need to supply only one Reducer. We doing this by combining the Reducers into one \"root\" reducer.\r\n  We achieve this using the combineReducers function.\r\n*/\r\n\r\nimport postReducer from \"./post-reducer\";\r\nimport todoReducer from \"./todo-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  // In this function, a peiece of a state is mapped to their \r\n  // corresponding Reducer. This mapping will be used in our React components to access information\r\n  // from a particular piece of state \r\n  posts: postReducer, \r\n  todos: todoReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst composeEnhancers =\r\n  process.env.NODE_ENV === \"development\"\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n    : compose;\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport { Provider } from \"react-redux\";\n\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"Main_Main__EQ_a5\",\"Heading\":\"Main_Heading__XeNqZ\",\"Buttons\":\"Main_Buttons__3Bq8P\",\"Button\":\"Main_Button__2IyXc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Todos\":\"Todos_Todos__MfXsN\",\"Error\":\"Todos_Error__1tFd_\",\"NewTodo\":\"Todos_NewTodo__3DEi8\"};"],"sourceRoot":""}